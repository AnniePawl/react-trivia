{"version":3,"sources":["components/Hero.js","components/CategoryButton.js","trivia.js","components/Question.js","App.js","serviceWorker.js","index.js"],"names":["Hero","className","CategoryButton","onClick","cat","e","catArr","trivArr","loadTriviaData","a","fetch","res","text","csv","arr","split","keys","i","length","row","trivObj","j","trim","push","console","log","Array","from","Set","map","Category","Question","props","category","question","answer","App","state","currentCategory","categoryButtons","key","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mQAUeA,MARf,WACE,OACE,yBAAKC,UAAU,mBACb,wBAAIA,UAAU,iBAAd,YCMSC,G,MARQ,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,IAChC,OACE,4BAAQH,UAAU,iBAAiBE,QAAU,SAACE,GAAD,OAAKF,EAAQC,KACvDA,K,wBCNHE,EAAS,CAAC,mBACRC,EAAU,G,SAIDC,I,2EAAf,0CAAAC,EAAA,sEACoBC,MAAM,iBAD1B,cACQC,EADR,gBAEoBA,EAAIC,OAFxB,OASE,IAPMC,EAFR,OAKQC,EAAMD,EAAIE,MAAM,MAChBC,EAAOF,EAAI,GAAGC,MAAM,MAGlBE,EAAE,EAAGA,EAAIH,EAAII,OAAQD,GAAG,EAAE,CAGhC,IAFME,EAAML,EAAIG,GAAGF,MAAM,MACnBK,EAAU,GACRC,EAAE,EAAGA,EAAIF,EAAID,OAAQG,GAAI,EAC/BD,EAAQJ,EAAKK,GAAGC,QAAUH,EAAIE,GAGhCd,EAAQgB,KAAKH,GAEfI,QAAQC,IAAIlB,GAWZD,EAASoB,MAAMC,KAAK,IAAKC,IAAKrB,EAAQsB,KAAI,SAAAT,GACxC,OAAOA,EAAQU,cAEjBN,QAAQC,IAAInB,GAhCd,6C,sBAqCAE,IAGeA,ICjCCuB,EAVA,SAAAC,GACd,OACE,6BACE,4BAAKA,EAAMC,UACX,2BAAID,EAAME,UACV,2BAAIF,EAAMG,UCiDDC,G,wNA3CbC,MAAQ,CAAEC,gBAAiB,M,uDACjB,IAAD,OAEDC,EAAkBjC,EAAOuB,KAAI,SAAAI,GACjC,OAAO,kBAAC,EAAD,CAELO,IAAKP,EACL7B,IAAK6B,EACL9B,QACE,SAAC8B,GAAD,OAAc,EAAKQ,SAAS,CAAEH,gBAAiBL,UAiBrD,OAEE,6BACE,kBAAC,EAAD,MAEA,6BAAMM,EAAN,KACA,kBAAC,EAAD,CACEN,SAAW,WACXC,SAAW,WACXC,OAAS,gB,GArCDO,cCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.2d26fd04.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Hero() {\n  return(\n    <div className='hero__container'>\n      <h1 className='hero__heading'>TRIVIA</h1>\n    </div>\n  )\n}\n\nexport default Hero","import React from 'react'\nimport './styles/custom.scss'\n\nconst CategoryButton = ({onClick, cat}) => {\n  return(\n    <button className='CategoryButton' onClick= {(e)=>onClick(cat)}>\n      {cat}\n    </button>\n  )\n}\n\nexport default CategoryButton","let catArr = [\"Load Categories\"]\nconst trivArr = []\n\n// Load Trivia Data\n// async will return a promise\nasync function loadTriviaData() {\n  const res = await fetch('data/test.csv')\n  const csv = await res.text()\n  // console.log(csv)\n\n  const arr = csv.split('\\n')\n  const keys = arr[0].split('\\t')\n  // console.log(keys)\n\n  for(let i=1; i < arr.length; i+=1){\n    const row = arr[i].split('\\t')\n    const trivObj = {}\n    for(let j=0; j < row.length; j +=1){\n      trivObj[keys[j].trim()] = row[j]\n     \n    }\n    trivArr.push(trivObj)\n  }\n  console.log(trivArr)\n\n  // const p = fetch('data/trivia.csv')\n  // const p2 = p.then((res)=> {\n  //   return res.text()\n  // })\n  // p2.then((csv)=> {\n  //   console.log(csv)\n  // })\n\n  // Categories \n  catArr = Array.from(new  Set (trivArr.map(trivObj=> {\n    return trivObj.Category\n  })))\n  console.log(catArr)\n}\n\n\n\nloadTriviaData()\n\n// Handle Trivia Data\nexport default loadTriviaData;\nexport {trivArr, catArr}\n","import React from 'react';\n\nconst Question= props => {\n  return(\n    <div>\n      <h1>{props.category}</h1>\n      <p>{props.question}</p>\n      <p>{props.answer}</p>\n    </div>\n  )\n}\n\nexport  default Question;","import React, {Component} from 'react';\nimport Hero from './components/Hero'\nimport './components/styles/custom.scss'\nimport  CategoryButton from './components/CategoryButton'\nimport './trivia'\nimport Question from './components/Question'\nimport loadTriviaData, {catArr, trivArr} from './trivia'\nimport Papa from 'papaparse'\nimport * as d3 from 'd3'\n\n\nclass App extends Component {\n\n  state = { currentCategory: null }\n  render() {\n\n    const categoryButtons = catArr.map(category => {\n      return <CategoryButton\n\n        key={category}\n        cat={category}\n        onClick={\n          (category) => this.setState({ currentCategory: category })\n        } />;\n\n\n    });\n\n//  const trivia_item = trivia.filter((trivia_item) => {\n//    return trivia_item.category == this.state.currentCategory || this.state.currentCategory == null\n//  }).map((trivia_item, i)=>{\n//    const {category, question, answer} = trivia_item\n//    return {\n//      <Question\n     \n//      />\n//    }\n//  })\n\n    return (\n\n      <div>\n        <Hero/>\n  \n        <div>{categoryButtons} </div>\n        <Question \n          category = \"category\" \n          question = \"question\" \n          answer = \"answer\" \n        />\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}